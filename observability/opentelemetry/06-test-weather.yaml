apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  labels:
    app: weather
data:
  spring.datasource.url: "jdbc:mariadb://weather-db:3306/weather"
  weatherServiceURL: "http://weather-services"
---
apiVersion: v1
kind: Secret
metadata:
  name: app-secret
  labels:
    app: weather
data:
  spring.datasource.password: d2VhdGhlcg==
  spring.datasource.username: d2VhdGhlcg==
---  
apiVersion: v1
kind: Service
metadata:
  name: weather-db
  labels: 
    app: weather
    tier: db
spec:
  type: ClusterIP
  ports:
    - name: mariadb
      port: 3306
      targetPort: 3306
  selector:
    app: weather
    tier: db
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: weather-db
  labels:
    app: weather
    tier: db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: weather
      tier: db
  template:
    metadata:
      labels:
        app: weather
        tier: db
        app.kubernetes.io/name: weather-db
    spec:
      # nodeSelector:
      #   kops.k8s.io/instancegroup: "spotnodes"
      containers:
      - image: mariadb:10.3
        name: mariadb
        resources: 
          limits:
            cpu: 50m
            memory: 128Mi
          requests:
            cpu: 50m
            memory: 128Mi         
        ports:
        - containerPort: 3306
          name: mariadb
        env:
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: app-secret
                key: spring.datasource.password
          - name: MYSQL_DATABASE
            value: weather
          - name: MYSQL_USER
            valueFrom:
              secretKeyRef:
                name: app-secret
                key: spring.datasource.username
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: app-secret
                key: spring.datasource.password
---
# 2 - weather services
apiVersion: v1
kind: Service
metadata:
  name: weather-services
  labels:
    app: weather
    tier: services
  # namespace: weather
spec:
  type: ClusterIP
  ports:
    - name: services
      port: 80
      targetPort: 8080
  selector:
    app: weather
    tier: services
---
# microservices components 2 - api services
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: weather
    tier: services
  name: weather-services
  # namespace: weather
spec:
  replicas: 1
  selector:
    matchLabels:
      app: weather
      tier: services
  template:
    metadata:
      labels:
        app: weather
        tier: services
        app.kubernetes.io/name: weather-services
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8888"
        prometheus.io/path: /actuator/prometheus    
        instrumentation.opentelemetry.io/inject-java: "true"
        # sidecar.opentelemetry.io/inject: 'true'
        instrumentation.opentelemetry.io/container-names: "weather-services"            
    spec:
      containers:
        - image: brainupgrade/weather-services:metrics
          imagePullPolicy: Always
          name: weather-services
          env:
            - name: APP_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.labels['app.kubernetes.io/name'] 
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: OTEL_SERVICE_NAME
              value: $(NAMESPACE)-$(APP_NAME)   
            - name: spring.application.name
              value: $(NAMESPACE)-$(APP_NAME)
            - name: server.port
              value: "8080"
            - name: management.endpoints.web.exposure.include
              value: "*"
            - name: management.server.port
              value: "8888"
            - name: management.metrics.web.server.request.autotime.enabled
              value: "true"
            - name: management.metrics.tags.application
              value: $(NAMESPACE)-$(APP_NAME) 
            - name: otel.instrumentation.log4j.capture-logs
              value: "true"
            - name: otel.logs.exporter
              value: "otlp"
          resources:
            limits:
              memory: "1500Mi"
              cpu: "1000m"
            requests:
              memory: "512Mi"
              cpu: "250m"          
          ports:
            - containerPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: weather
    tier: front
  name: weather-front
spec:
  replicas: 1
  selector:
    matchLabels:
      app: weather
      tier: front
  template:
    metadata:
      labels:
        app: weather
        tier: front
        app.kubernetes.io/name: weather-front
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8888"
        prometheus.io/path: /actuator/prometheus       
        instrumentation.opentelemetry.io/inject-java: "true"
        # sidecar.opentelemetry.io/inject: 'true'
        instrumentation.opentelemetry.io/container-names: "weather-front"         
    spec:   
      containers:
        - image: brainupgrade/weather:metrics
          imagePullPolicy: Always
          name: weather-front
          resources:
            limits:
              cpu: 1000m
              memory: 2048Mi
            requests:
              cpu: 100m
              memory: 1500Mi           
          env:
            - name: APP_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.labels['app.kubernetes.io/name'] 
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: OTEL_SERVICE_NAME
              value: $(NAMESPACE)-$(APP_NAME)   
            - name: spring.application.name
              value: $(NAMESPACE)-$(APP_NAME)
            - name: spring.datasource.url
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: spring.datasource.url
            - name: spring.datasource.username
              valueFrom:
                secretKeyRef:
                  name: app-secret
                  key: spring.datasource.username
            - name: spring.datasource.password
              valueFrom:
                secretKeyRef:
                  name: app-secret
                  key: spring.datasource.password
            - name: weatherServiceURL
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: weatherServiceURL
            - name: management.endpoints.web.exposure.include
              value: "*"
            - name: management.server.port
              value: "8888"
            - name: management.metrics.web.server.request.autotime.enabled
              value: "true"
            - name: management.metrics.tags.application
              value: $(NAMESPACE)-$(APP_NAME) 
            - name: otel.instrumentation.log4j.capture-logs
              value: "true"
            - name: otel.logs.exporter
              value: "otlp"              
          ports:
            - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: weather-front
  labels:
    app: weather
    tier: front
spec:
  type: NodePort
  ports:
    - name: app
      port: 80
      targetPort: 8080
  selector:
    app: weather
    tier: front   